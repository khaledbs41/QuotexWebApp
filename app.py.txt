import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import timedelta

st.set_page_config(page_title="Quotex Signals", layout="wide")
st.title("📊 Quotex Signals Analyzer")
st.markdown("ارفع ملف CSV (شموع دقيقة) وسيحسب التطبيق المؤشرات ويعرض الإشارات والرسم البياني.")

uploaded_file = st.file_uploader("ارفع ملف CSV", type=["csv"])
col1, col2 = st.columns([3,1])

with col2:
    st.header("إعدادات")
    tz_offset = st.number_input("تعويض التوقيت (ساعات)", value=1)
    sma_fast = st.number_input("SMA_fast", value=50)
    sma_slow = st.number_input("SMA_slow", value=200)
    rsi_period = st.number_input("RSI period", value=14)
    bb_period = st.number_input("Bollinger period", value=20)
    bb_k = st.number_input("Bollinger K", value=2.0)
    analyze_btn = st.button("🔍 حلل الملف")

def compute_rsi(series, period):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(period).mean()
    avg_loss = loss.rolling(period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

if uploaded_file and analyze_btn:
    df = pd.read_csv(uploaded_file)
    df.columns = [c.lower() for c in df.columns]
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['timestamp_local'] = df['timestamp'] + timedelta(hours=int(tz_offset))
    for col in ['open','high','low','close']:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    df = df.dropna(subset=['open','high','low','close'])

    # المؤشرات
    df[f'sma_{sma_fast}'] = df['close'].rolling(sma_fast).mean()
    df[f'sma_{sma_slow}'] = df['close'].rolling(sma_slow).mean()
    df['rsi'] = compute_rsi(df['close'], int(rsi_period))
    df['bb_mid'] = df['close'].rolling(int(bb_period)).mean()
    df['bb_std'] = df['close'].rolling(int(bb_period)).std()
    df['bb_upper'] = df['bb_mid'] + bb_k * df['bb_std']
    df['bb_lower'] = df['bb_mid'] - bb_k * df['bb_std']

    # إشارات بسيطة
    signals = []
    for i in range(1, len(df)):
        prev_fast = df[f'sma_{sma_fast}'].iat[i-1]
        prev_slow = df[f'sma_{sma_slow}'].iat[i-1]
        cur_fast = df[f'sma_{sma_fast}'].iat[i]
        cur_slow = df[f'sma_{sma_slow}'].iat[i]
        sig = None
        if pd.notna(prev_fast) and pd.notna(prev_slow) and pd.notna(cur_fast) and pd.notna(cur_slow):
            if prev_fast <= prev_slow and cur_fast > cur_slow:
                sig = "BUY"
            elif prev_fast >= prev_slow and cur_fast < cur_slow:
                sig = "SELL"
        if sig:
            signals.append({"timestamp": df['timestamp_local'].iat[i], "signal": sig, "price": df['close'].iat[i]})

    st.subheader("📌 الإشارات")
    if signals:
        for s in signals[-50:]:
            st.success(f"{s['timestamp']} → {s['signal']} @ {s['price']}")
    else:
        st.info("لا توجد إشارات قوية.")

    st.subheader("📈 الرسم البياني")
    fig = go.Figure(data=[go.Candlestick(
        x=df['timestamp_local'],
        open=df['open'],
        high=df['high'],
        low=df['low'],
        close=df['close']
    )])
    fig.add_trace(go.Scatter(x=df['timestamp_local'], y=df[f'sma_{sma_fast}'], name=f"SMA{int(sma_fast)}"))
    fig.add_trace(go.Scatter(x=df['timestamp_local'], y=df[f'sma_{sma_slow}'], name=f"SMA{int(sma_slow)}"))
    st.plotly_chart(fig, use_container_width=True)

